{"kind":"FETCH","data":{"headers":{"access-control-allow-origin":"*","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000, h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","content-length":"89084","content-type":"application/json","date":"Wed, 06 Aug 2025 15:46:44 GMT","server":"Google Frontend","x-cloud-trace-context":"2ec837da6f83334e34e92b01b36eabdb;o=1"},"body":"[{"bible_version_id": 1, "audio_ids": [8], "popularity": 14.42, "abbreviation": "KJV", "title": "King James Version", "local_abbreviation": "KJV", "local_title": "King James Version", "language_tag": "eng", "language_name": "English", "publisher_name": "Cambridge Univ. Press & BFBS", "scope": "full_bible", "has_audio": true, "translation_type": "mostly_direct", "release_year": 1611, "intended_use": ["formal", "scholarly"], "reading_level": "proficient", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["US", "NG", "GB", "ZA", "PH", "CA", "GH", "KE", "IN"], "additional_resources": [], "license_type": "public_domain*", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment. (Note: In UK, held under Crown copyright)", "recommended_font": [], "popular_sub_denominations": ["Southern Baptist Convention", "Church of God in Christ", "Churches of Christ"], "version_description": "The KJV was commissioned by King James I following the 1604 Hampton Court Conference. Forty-seven scholars worked in six companies at Westminster, Oxford, and Cambridge, including Lancelot Andrewes, John Reynolds, and Edward Lively. Based primarily on the Textus Receptus (Beza's 1598 edition) and Masoretic Hebrew text, it employed formal equivalence while prioritizing literary excellence. Major revisions occurred in 1629, 1638, 1762, and 1769, with the Oxford 1769 edition becoming standard. Universally acclaimed as a masterpiece of English literature, it profoundly influenced the language. Modern scholars recognize its exceptional literary quality while acknowledging limitations due to manuscript evidence unavailable in 1611.", "popular_denominations": ["Evangelical Protestant", "Pentecostal / Charismatic", "Mainline Protestant"]}, {"bible_version_id": 93, "audio_ids": [37, 1461], "popularity": 1.1, "abbreviation": "LSG", "title": "Bible Segond 1910", "local_abbreviation": "LSG", "local_title": "La Sainte Bible par Louis Segond 1910", "language_tag": "fra", "language_name": "French", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": true, "translation_type": "mostly_direct", "release_year": 1880, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["FR", "CD", "CI", "CA", "US", "BE", "CM", "CH", "GA"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "United Methodist Church"], "version_description": "Louis Segond (1810-1885), Swiss Reformed theologian, produced this landmark translation directly from Hebrew and Greek manuscripts. After studying at Geneva, Strasbourg, and Bonn, Segond served as pastor before becoming Professor of Old Testament at Geneva. Old Testament published 1871, New Testament 1880. British and Foreign Bible Society commissioned 1910 revision, becoming standard French Protestant Bible. Utilized critical texts employing formal equivalence balancing precision with accessibility. Introduced innovations like \"l'\u00c9ternel\" for tetragrammaton. Profoundly influenced subsequent French Protestant translations, remains widely used across francophone Protestant churches. Digital editions and modern revisions (Segond 21, 2007) demonstrate enduring significance in French biblical scholarship.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 12, "audio_ids": [7], "popularity": 1.05, "abbreviation": "ASV", "title": "American Standard Version", "local_abbreviation": "ASV", "local_title": "American Standard Version", "language_tag": "eng", "language_name": "English", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": true, "translation_type": "direct", "release_year": 1901, "intended_use": ["formal", "scholarly"], "reading_level": "proficient", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["US", "NG", "ZA", "GB", "PH", "CA", "GH", "IN", "AU"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Jehovah's Witnesses", "Episcopal Church", "Churches of Christ"], "version_description": "Originated from American participation in the English Revised Version project. Thirty American scholars led by Philip Schaff represented multiple denominations. Based on Westcott-Hort's 1881 Greek New Testament and Masoretic Hebrew text, marking departure from Textus Receptus toward critical methodology. Employed strict formal equivalence, prioritizing literal accuracy over readability, consistently rendering the tetragrammaton as \"Jehovah\" (6,823 occurrences). Published by Thomas Nelson & Sons, entering public domain in 1957. Characterized by extreme literalism and archaic language structures. Served as foundation for RSV, NASB, and numerous modern translations. Praised for exceptional accuracy and literal fidelity, though criticized for awkward English and limited readability.", "popular_denominations": ["Jehovah's Witnesses", "Mainline Protestant", "Restorationist"]}, {"bible_version_id": 51, "audio_ids": [43], "popularity": 0.21, "abbreviation": "DELUT", "title": "Luther Bible 1912", "local_abbreviation": "DELUT", "local_title": "Lutherbibel 1912", "language_tag": "deu", "language_name": "German", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": true, "translation_type": "dynamic_equivalence", "release_year": 1534, "intended_use": ["formal", "scholarly"], "reading_level": "proficient", "source_manuscript": ["Textus Receptus", "Vulgate", "Masoretic Text"], "top_countries": ["DE", "CH", "AT", "US", "CA", "PY", "MX", "IT", "FR"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Evangelical Lutheran Church in America", "Lutheran Church-Missouri Synod", "Wisconsin Evangelical Lutheran Synod"], "version_description": "Second official church revision of Martin Luther's groundbreaking 16th-century translation. Original by Luther with \"Sanhedrin\" committee including Melanchthon and Aurogallus. 1912 revision by Evangelical Church Council maintaining Luther's theology while modernizing language. Based on Erasmus's Greek New Testament (later Textus Receptus) and Hebrew manuscripts. Luther pioneered dynamic equivalence prioritizing meaning over literal correspondence. His New Testament appeared 1522, complete Bible 1534, with revisions through 1545. Official church revisions: 1892, 1912, 1956, 1964, 1970, 1975, 1984, 2017. Fundamentally shaped German Protestant theology and High German literature. Scholars recognize successful balance between historical preservation and contemporary accessibility.", "popular_denominations": ["Mainline Protestant", "Evangelical Protestant"]}, {"bible_version_id": 3034, "audio_ids": [1804], "popularity": 0.2, "abbreviation": "BSB", "title": "Berean Standard Bible", "local_abbreviation": "BSB", "local_title": "English: Berean Standard Bible", "language_tag": "eng", "language_name": "English", "publisher_name": "BSB Publishing, LLC", "scope": "full_bible", "has_audio": true, "translation_type": "mostly_direct", "release_year": 2016, "intended_use": ["balanced", "contemporary"], "reading_level": "proficient", "source_manuscript": ["Critical Text (Nestle-Aland)", "Masoretic Text"], "top_countries": ["US", "NG", "ZA", "GB", "PH", "CA", "GH", "KE", "IN"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Non-Denominational Churches", "Southern Baptist Convention", "Churches of Christ"], "version_description": "Originally published as Berean Study Bible, renamed to clarify purpose. Translation committee includes Dr. Grant Osborne, Dr. Eugene H. Merrill, Dr. Gary Hill, and others, coordinated by Bible Hub. Utilizes Nestle 1904 Greek text alongside Textus Receptus and Byzantine sources. Combines formal and dynamic equivalence approaches while maintaining original gender designations. Employed innovative \"open translation\" methodology with public translation tables. Published 2020, dedicated to public domain April 2023. Targets general readers seeking accurate, readable Scripture. Features multi-tiered system including interlinear, literal, standard, and emphasized versions. Reception positive, particularly welcoming public domain status eliminating copyright restrictions common to commercial translations.", "popular_denominations": ["Non-Denominational / Independent", "Evangelical Protestant", "Restorationist"]}, {"bible_version_id": 42, "audio_ids": [], "popularity": 0.06, "abbreviation": "CPDV", "title": "Catholic Public Domain Version", "local_abbreviation": "CPDV", "local_title": "Catholic Public Domain Version", "language_tag": "eng", "language_name": "English", "publisher_name": "Public Domain", "scope": "full_bible+ap", "has_audio": false, "translation_type": "mostly_direct", "release_year": 2009, "intended_use": ["formal", "scholarly"], "reading_level": "proficient", "source_manuscript": ["Vulgate (Clementine)"], "top_countries": ["US", "NG", "PH", "GB", "ZA", "CA", "AU", "IN", "KE"], "additional_resources": ["commentary", "notes"], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Roman Catholic Church", "Maronite Catholic", "Ukrainian Greek Catholic"], "version_description": "21st-century English translation of Latin Vulgate completed March 28, 2009, by Ronald L. Conte Jr. Emerged from need for accessible, copyright-free Catholic Bible for electronic distribution. Utilized 1914 Hetzenauer edition of Sixtine-Clementine Vulgate, consulting additional Latin editions. Emphasized verse-by-verse translation from Latin using Challoner Douay-Rheims as guide. Adheres to formal equivalence avoiding inclusive language. Deliberately placed in public domain prohibiting copyright restrictions. Serves primarily private study and digital distribution, lacking official ecclesiastical endorsement. Scholarly reception limited, representing individual effort rather than institutional Catholic biblical scholarship.", "popular_denominations": ["Roman Catholic", "Eastern Catholic"]}, {"bible_version_id": 147, "audio_ids": [], "popularity": 0.05, "abbreviation": "RVES", "title": "Reina-Valera Antigua", "local_abbreviation": "RVES", "local_title": "Reina-Valera Antigua", "language_tag": "spa", "language_name": "Spanish", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1602, "intended_use": ["formal", "scholarly"], "reading_level": "proficient", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["US", "MX", "CO", "AR", "GT", "VE", "ES", "CL", "PE"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Southern Baptist Convention", "Assemblies of God", "Christian and Missionary Alliance"], "version_description": "Foundational Spanish Protestant Bible from Casiodoro de Reina's 1569 \"Biblia del Oso,\" revised by Cipriano de Valera 1602. Both translators were former Catholic monks fleeing Spanish Inquisition. Based on Hebrew Masoretic Text (Bomberg 1525) and Greek Textus Receptus (Stephanus 1550), consulting Ferrara Bible and Santes Pagnino's Latin. Favored formal equivalence incorporating earlier Protestant works. Published Basel after twelve years labor, included deuterocanonicals. Valera's revision relocated these to apocrypha. Profoundly influenced Hispanic Protestant Christianity, undergoing multiple revisions (1865, 1909, 1960, 1995) while maintaining textual authority comparable to King James Version among Spanish evangelicals.", "popular_denominations": ["Evangelical Protestant", "Pentecostal / Charismatic"]}, {"bible_version_id": 130, "audio_ids": [], "popularity": 0.04, "abbreviation": "TOJB2011", "title": "The Orthodox Jewish Bible", "local_abbreviation": "TOJB2011", "local_title": "The Orthodox Jewish Bible", "language_tag": "eng", "language_name": "English", "publisher_name": "Artists for Israel International", "scope": "full_bible", "has_audio": false, "translation_type": "thought_for_thought", "release_year": 2002, "intended_use": ["specialized", "jewish_perspective"], "reading_level": "proficient", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["US", "NG", "ZA", "GB", "IN", "CA", "AU", "GH", "PH"], "additional_resources": ["commentary", "annotations"], "license_type": "creative_commons_attribution", "license_description": "Free to use with proper credit given to the original source.", "recommended_font": ["Noto Sans Hebrew", "David"], "popular_sub_denominations": ["Jews for Jesus", "Messianic Jewish Alliance of America", "Hebrew Roots Movement"], "version_description": "Unique Messianic translation by Dr. Phillip Goble, completed 2002, fourth edition 2011 by Artists for Israel International. Goble sought literal translation incorporating Yiddish and Hasidic cultural expressions. Employs transliterated Hebrew terms preserving original idioms and verb tenses. Generated scholarly controversy\u2014critics argue neither truly \"Orthodox\" nor \"Jewish\" but Christian Messianic Bible appropriating Jewish terminology. Targets Messianic Jews and Christians seeking biblical texts within original Jewish context. Remains contentious within both Jewish and Christian academic circles due to theological positioning and cultural appropriation concerns.", "popular_denominations": ["Messianic / Hebrew Roots"]}, {"bible_version_id": 195, "audio_ids": [], "popularity": 0.04, "abbreviation": "SAT", "title": "Holy Bible: Easy-to-Read Translation", "local_abbreviation": "\u062a \u0639 \u0645", "local_title": "\u0627\u0644\u0643\u0650\u062a\u0627\u0628 \u0627\u0644\u0645\u064f\u0642\u064e\u062f\u064e\u0651\u0633: \u0627\u0644\u062a\u064e\u0651\u0631\u0652\u062c\u064e\u0645\u064e\u0629\u064f \u0627\u0644\u0639\u064e\u0631\u064e\u0628\u0650\u064a\u064e\u0651\u0629\u064f \u0627\u0644\u0645\u064f\u0628\u064e\u0633\u064e\u0651\u0637\u064e\u0629\u064f", "language_tag": "arb", "language_name": "Arabic (Standard)", "publisher_name": "Bible League International", "scope": "full_bible", "has_audio": false, "translation_type": "thought_for_thought", "release_year": 1987, "intended_use": ["simplified", "easy_reading"], "reading_level": "proficient", "source_manuscript": ["Critical Text", "Dead Sea Scrolls", "Septuagint"], "top_countries": ["EG", "IQ", "US", "JO", "LB", "CA", "SY", "YE", "SA"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Christian and Missionary Alliance", "Assemblies of God"], "version_description": "Originally developed as English Version for the Deaf (EVD) by World Bible Translation Center. Translation team: Ervin Bishop (Greek), David Stringham (Hebrew), Benton L. Dibrell (Deaf Language Specialist). Utilizes Biblia Hebraica Stuttgartensia and UBS Greek New Testament (4th edition). Employs functional equivalence methodology, prioritizing comprehensibility. Complete Bible published 1987, major revision 2004. Written at third-grade reading level targeting children, ESL learners, and limited English proficiency individuals. Published by Bible League International. Features extreme simplification, expanding single sentences into multiple shorter ones. While enhancing accessibility, critics argue occasional oversimplification loses nuanced meaning. Standard copyright restrictions limit quotation to 1,000 verses without permission.", "popular_denominations": ["Mainline Protestant", "Evangelical Protestant", "Pentecostal / Charismatic"]}, {"bible_version_id": 58, "audio_ids": [], "popularity": 0.04, "abbreviation": "ELB71", "title": "Elberfelder 1871", "local_abbreviation": "ELB71", "local_title": "Elberfelder 1871", "language_tag": "deu", "language_name": "German", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "direct", "release_year": 1871, "intended_use": ["formal", "scholarly"], "reading_level": "proficient", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["DE", "CH", "AT", "US", "PY", "CA", "IT", "GB", "NL"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Evangelical Lutheran Church in America", "Presbyterian Church (USA)", "Lutheran Church-Missouri Synod"], "version_description": "Emerged from 19th-century Brethren movement's emphasis on biblical literalism. Primarily accomplished by John Nelson Darby with Julius Anton von Poseck, Carl Brockhaus, and Hermanus Cornelis Voorhoeve. New Testament (1855) based on Textus Receptus; Old Testament (1869-1871) utilized Masoretic text. Adopted strictly literal word-for-word approach reflecting verbal inspiration doctrine. Characterized by extremely literal German reflecting Hebrew/Greek structures. Significant revisions: 1960, 1975, 1985, 2003. Significantly influenced German evangelical Christianity, particularly within Brethren movement. Reputation for accuracy made it preferred for detailed study. Scholars recognize value for precise textual study while acknowledging stylistic limitations.", "popular_denominations": ["Mainline Protestant", "Evangelical Protestant"]}, {"bible_version_id": 819, "audio_ids": [], "popularity": 0.03, "abbreviation": "HHBD", "title": "Hindi Holy Bible", "local_abbreviation": "HHBD", "local_title": "Hindi Holy Bible", "language_tag": "hin", "language_name": "Hindi", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1843, "intended_use": ["balanced", "contemporary"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["IN", "US", "GB", "CA", "AE", "NP", "AU", "NZ", "DE"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": ["Noto Sans Devanagari", "Mangal"], "popular_sub_denominations": ["Presbyterian Church (USA)", "Christian and Missionary Alliance", "Assemblies of God"], "version_description": "Traces origins to Benjamin Schultze's pioneering work (1745 Genesis). Henry Martyn printed New Testament 1814, later revised by William Carey and others. Bible Society of India (established 1811) became primary steward. Recent major revision 1967 with continued updates. Follows formal equivalence from Hebrew, Aramaic, and Greek texts. Serves standard Hindi Bible for 530+ million speakers. Targets educated Hindi speakers comfortable with Devanagari script. Extensive usage across North India; available print, audio, Braille formats. Scholarly assessment recognizes linguistically solid translation, though archaic language reflects earlier Hindi literary conventions.", "popular_denominations": ["Mainline Protestant", "Evangelical Protestant", "Pentecostal / Charismatic"]}, {"bible_version_id": 1932, "audio_ids": [], "popularity": 0.03, "abbreviation": "FBV", "title": "Free Bible Version", "local_abbreviation": "FBV", "local_title": "Free Bible Version", "language_tag": "eng", "language_name": "English", "publisher_name": "Free Bible Ministry, Inc.", "scope": "full_bible", "has_audio": false, "translation_type": "dynamic_equivalence", "release_year": 2020, "intended_use": ["dynamic", "accessible"], "reading_level": "proficient", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["US", "NG", "ZA", "PH", "GB", "GH", "CA", "IN", "KE"], "additional_resources": [], "license_type": "creative_commons_attribution", "license_description": "Free to use with proper credit given to the original source.", "recommended_font": [], "popular_sub_denominations": ["Non-Denominational Churches", "Life.Church", "Elevation Church"], "version_description": "Developed by Dr. Jonathan Gallagher (Ph.D., University of St Andrews) addressing copyright restrictions limiting biblical text usage. Sole translator works directly from Nestle-Aland Greek and Hebrew manuscripts. Prioritizes faithfulness to original meaning using contemporary English without slang. New Testament completed 2018, full Bible now available. Targets general readers seeking contemporary English without theological bias. Most distinctive feature: Creative Commons Attribution-ShareAlike 4.0 license allowing unlimited reproduction and distribution with attribution. Integrated into major Bible apps and UBS Digital Bible Library. Reception limited but positive, appreciating translation quality and access freedom. Single-translator approach differs from committee methodology, though Gallagher's credentials and transparent methodology earn scholarly respect.", "popular_denominations": ["Non-Denominational / Independent"]}, {"bible_version_id": 81, "audio_ids": [], "popularity": 0.03, "abbreviation": "JA1955", "title": "Colloquial Japanese (1955)", "local_abbreviation": "JA1955", "local_title": "Colloquial Japanese (1955)", "language_tag": "jpn", "language_name": "Japanese", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "dynamic_equivalence", "release_year": 1955, "intended_use": ["dynamic", "accessible"], "reading_level": "intermediate", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["JP", "US", "KR", "BR", "AU", "CA", "HK", "TW", "GB"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": ["Noto Sans Japanese", "Yu Gothic"], "popular_sub_denominations": ["Presbyterian Church (USA)", "Christian and Missionary Alliance", "Assemblies of God"], "version_description": "Japan's first complete Bible translation in modern colloquial Japanese, developed by six Japanese scholars without missionary participation. Committee included Dr. Tsuru Senji, Prof. Tezuka Giichiro, Prof. Endo Toshio (Old Testament), Dr. Matsumoto Takuo, Dr. Yamaya Seigo, Masashi Takahashi (New Testament). Based primarily on Revised Standard Version, emerged from post-WWII linguistic reforms promoting simplified Japanese. Despite historical significance, criticized for poor literary style and never gained widespread popularity. Committee faced challenges balancing faithful translation with idiomatic Japanese, producing mixed literary-colloquial style failing to resonate with readers accustomed to classical biblical Japanese.", "popular_denominations": ["Mainline Protestant", "Evangelical Protestant", "Pentecostal / Charismatic"]}, {"bible_version_id": 206, "audio_ids": [809], "popularity": 0.02, "abbreviation": "engWEBUS", "title": "World English Bible, American English Edition, without Strong's Numbers", "local_abbreviation": "WEBUS", "local_title": "World English Bible, American English Edition, without Strong's Numbers", "language_tag": "eng", "language_name": "English", "publisher_name": "eBible.org", "scope": "full_bible+ap", "has_audio": true, "translation_type": "mostly_direct", "release_year": 2020, "intended_use": ["balanced", "contemporary"], "reading_level": "advanced", "source_manuscript": ["Majority Text (Byzantine)", "Masoretic Text"], "top_countries": ["US", "NG", "ZA", "GB", "PH", "IN", "CA", "GH", "AU"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Non-Denominational Churches", "Life.Church", "The Rock Church"], "version_description": "Initiated 1994 by Michael Paul Johnson under Rainbow Missions, Inc., creating copyright-free modern English translation for internet distribution. Johnson, self-taught in Greek and Hebrew, incorporated worldwide volunteer feedback. Based on ASV foundation, updated with Biblia Hebraica Stuttgartensia and combination of Textus Receptus, Byzantine Majority Text, and critical texts. Employs formal equivalence while modernizing archaic language through seven-pass editing process. Completed 2020 with ongoing updates. Available in multiple editions and formats. Balances formal equivalence with contemporary readability. Freely available with public domain status. Generally viewed as competent ASV modernization, praised for accessibility and copyright-free status, filling important niche for digital ministries.", "popular_denominations": ["Non-Denominational / Independent"]}, {"bible_version_id": 177, "audio_ids": [], "popularity": 0.02, "abbreviation": "TLAB", "title": "Ang Biblia", "local_abbreviation": "TLAB", "local_title": "Ang Biblia", "language_tag": "tgl", "language_name": "Tagalog", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1905, "intended_use": ["balanced", "contemporary"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["PH", "US", "SA", "JP", "CA", "AE", "IT", "AU", "HK"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Southern Baptist Convention", "Assemblies of God", "Christian and Missionary Alliance"], "version_description": "Foundational Filipino Bible translation, first published Philippine Bible Society 1905, based on American Standard Version and Spanish biblical texts. Formal equivalence translation revised 2001 using Biblia Hebraica Stuttgartensia and UBS Greek New Testament. Emerged from early Protestant missionary work, representing first systematic effort rendering biblical texts into Tagalog. 1905 version utilized Westcott-Hort Greek text; 2001 revision incorporated recent textual scholarship. Despite being century old, remains widely used in Filipino Protestant churches, achieving cultural significance as \"Filipino King James Version.\" Formal approach prioritizes fidelity to original languages while maintaining accessibility, serving as cornerstone of Filipino Christian literature.", "popular_denominations": ["Evangelical Protestant", "Pentecostal / Charismatic"]}, {"bible_version_id": 62, "audio_ids": [], "popularity": 0.02, "abbreviation": "FMAR", "title": "Martin 1744", "local_abbreviation": "FMAR", "local_title": "Martin 1744", "language_tag": "fra", "language_name": "French", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1744, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["FR", "CD", "CI", "CA", "CM", "US", "BE", "GA", "BJ"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "United Methodist Church"], "version_description": "David Martin (1639-1721), French Protestant theologian, produced influential revision of Bible de Gen\u00e8ve. After Revocation of Edict of Nantes, relocated to Utrecht as divinity professor. New Testament 1696, complete Bible 1707, definitive 1744 edition revised by Pierre Roques. Combined rigorous textual criticism with extensive annotations, utilizing Textus Receptus and Hebrew manuscripts. Featured scholarly apparatus including parallel passages and critical dissertations. Martin's linguistic expertise ensured elegant French prose while maintaining theological precision. The 1744 revision represents pinnacle of Reformed biblical scholarship, influencing subsequent Protestant translations and serving as foundation for Ostervald's work. Available digitally, valued by scholars emphasizing Textus Receptus-based translations.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 131, "audio_ids": [], "popularity": 0.02, "abbreviation": "OST", "title": "Ostervald", "local_abbreviation": "OST", "local_title": "Ostervald", "language_tag": "fra", "language_name": "French", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1744, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["FR", "CD", "CI", "CA", "CM", "BE", "CH", "GA", "US"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "United Methodist Church"], "version_description": "Jean-Fr\u00e9d\u00e9ric Ostervald (1663-1747), Swiss Protestant pastor from Neuch\u00e2tel, created widely influential translation dominating French Protestant usage for over a century. Educated at prestigious Reformed institutions, ordained 1683, became leading figure in Protestant renewal. Translation first published 1724, revised through 1744, comprehensively revised Bible de Gen\u00e8ve incorporating Textus Receptus, Septuagint, Vulgate, and contemporary scholarship. Emphasized clarity and accessibility while maintaining theological accuracy. First Protestant French Bible published in America (1811), widely adopted globally. Modern revisions (1996, 2008) continue legacy as French equivalent of King James Version. Remains significant for historical influence on French Protestant interpretation and continued use in traditional Reformed communities.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 7, "audio_ids": [], "popularity": 0.01, "abbreviation": "ALBB", "title": "Albanian Bible 1994", "local_abbreviation": "ALBB", "local_title": "Bibla Shqip 1994", "language_tag": "sqi", "language_name": "Albanian (Standard)", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1994, "intended_use": ["balanced", "contemporary"], "reading_level": "intermediate", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["AL", "US", "DE", "IT", "RS", "GR", "CH", "GB", "AT"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "United Methodist Church"], "version_description": "Albanian Bible Society's complete translation, finalized 1994 after two decades preparation beginning 1974. Originally \"Lajmi i Mir\u00eb,\" rendered from Italian Textus Receptus-based Nuova Diodati Revision 1991, cross-referenced with Hebrew/Greek texts and KJV. Emphasized faithful word-for-word accuracy maintaining comprehensibility. Revised New Testament 2002 ensuring detailed comparison with originals. Emerged during Albania's post-communist transition, revitalizing Albanian Christian identity. Employs modern Standard Albanian with Tosk characteristics using traditional proper names. Gained widespread acceptance among evangelical churches, remains primary Protestant Bible in Albania. Available various formats including study editions and digital platforms.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 823, "audio_ids": [], "popularity": 0.01, "abbreviation": "VULG", "title": "Vulgata latina", "local_abbreviation": "VULG", "local_title": "Vulgata latina", "language_tag": "lat", "language_name": "Latin", "publisher_name": "Public Domain", "scope": "full_bible+ap", "has_audio": false, "translation_type": "direct", "release_year": 405, "intended_use": ["specialized", "ancient_language"], "reading_level": "advanced", "source_manuscript": ["Original Hebrew/Greek", "Septuagint"], "top_countries": ["US", "BR", "DE", "MX", "GB", "PH", "ID", "NL", "CA"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Roman Catholic Church", "Ukrainian Greek Catholic", "Maronite Catholic"], "version_description": "Jerome's monumental late-4th-century Latin translation commissioned by Pope Damasus I (382 CE). Initially revised Vetus Latina Gospels using superior Greek manuscripts, then translated entire Old Testament from Hebrew rather than Septuagint\u2014establishing unprecedented methodological precedent. Hebrew sources included Masoretic Text tradition; consulted Jewish rabbis and Hexaplar Septuagint. Methodology emphasized accuracy over stylistic elegance. Composite Vulgate incorporated non-Hieronymic materials. Council of Trent (1546) declared authentic for Catholic doctrine, leading to Sixtine (1590) and Clementine (1592) editions. Profoundly shaped Western Christian theological vocabulary and biblical interpretation for over a millennium. Modern critical editions continue Jerome's scholarly legacy.", "popular_denominations": ["Roman Catholic", "Eastern Catholic"]}, {"bible_version_id": 121, "audio_ids": [], "popularity": 0.01, "abbreviation": "Bibel1930", "title": "Bibel 1930 - Bibelselskapet", "local_abbreviation": "Bibel1930", "local_title": "Bibel 1930 - Bibelselskapet", "language_tag": "nob", "language_name": "Norwegian Bokm\u00e5l", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1930, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["NO", "DK", "DE", "NL", "US", "CH", "SE", "FI", "GB"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Evangelical Lutheran Church in America", "Presbyterian Church (USA)", "United Methodist Church"], "version_description": "Significant milestone produced by Norwegian Bible Society, comprehensive revision of 1891 Old Testament and 1904 New Testament creating unified Norwegian expression. Translation committee led by professors Anton Christian Bang and Sigurd Odland with Alexander Seippel. Followed 1917 orthographic norms employing formal equivalence maintaining close Textus Receptus adherence. Emphasized linguistic Norwegianization preserving textual accuracy. Served standard Norwegian church Bible over 40 years, consolidating linguistic identity separate from Danish influence. Remained dominant liturgical text until 1978 revision demonstrating state church commitment to vernacular accessibility maintaining theological conservatism.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 54, "audio_ids": [], "popularity": 0.01, "abbreviation": "DB1885", "title": "Diodati Bible 1885", "local_abbreviation": "DB1885", "local_title": "Diodati Bibbia 1885", "language_tag": "ita", "language_name": "Italian", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1603, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["IT", "US", "BR", "DE", "CH", "GB", "FR", "MX", "CO"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "United Methodist Church"], "version_description": "Standard late 19th-century edition of Giovanni Diodati's seminal Italian Bible. Diodati (1576-1649), Genevan-born Italian Protestant theologian, created first Italian Bible from Hebrew, Greek, Latin, Syriac sources (original 1607). 1885 edition solidified text as definitive Protestant Bible for Italian communities. Maintained Diodati's scholarly approach incorporating minor textual refinements. Methodology emphasized formal equivalence and Protestant theological perspectives contrasting Catholic Vulgate-based translations. Profoundly influenced Italian Protestant communities remaining primary Protestant Bible until 20th century. Foundation for Italian Protestant biblical scholarship influencing subsequent translations including modern Nuova Diodati (1991).", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 132, "audio_ids": [], "popularity": 0.01, "abbreviation": "PBG", "title": "Biblia Gda\u0144ska", "local_abbreviation": "PBG", "local_title": "Biblia Gda\u0144ska", "language_tag": "pol", "language_name": "Polish", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1632, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["PL", "DE", "GB", "US", "NL", "CZ", "IE", "NO", "UA"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "United Methodist Church"], "version_description": "Poland's most historically significant Protestant Bible translation, first published 1632, serving as primary evangelical text over three centuries. Following 1600 Synod of O\u017carowice, Martin Janicki translated from Hebrew/Greek, revised by Reformed/Lutheran scholars including Daniel Miko\u0142ajewski. Superseded Brest Bible (1563) offering superior accuracy and literary quality. Methodology compared Hebrew, Greek, Vulgate, existing vernacular translations. During Counter-Reformation, became instrumental in Polish Protestant identity formation. Established many biblical terms in Polish demonstrating exceptional literary craftsmanship. Foundation for subsequent Protestant biblical scholarship, modern updates like 2009 Uwsp\u00f3\u0142cze\u015bniona Biblia Gda\u0144ska maintain linguistic legacy.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 96, "audio_ids": [], "popularity": 0.01, "abbreviation": "MG1865", "title": "Malagasy Bible", "local_abbreviation": "MG1865", "local_title": "Malagasy Bible", "language_tag": "plt", "language_name": "Malgache", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1865, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["MG", "FR", "CA", "DE", "US", "RE", "CH", "MU", "GB"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "United Methodist Church"], "version_description": "Foundational achievement completed during London Missionary Society pioneering work. Translation initiated by Welsh missionaries David Jones and David Griffiths arriving 1820-1821, working with twelve Malagasy scholars. New Testament 1830, full Bible 1835 despite Queen Ranavalona I persecution. Accomplished under extraordinary circumstances with final printing as missionaries faced exile. Served Malagasy Christian community through 26 years persecution becoming \"Martyr Church\" cornerstone. Established foundation for written Malagasy remaining standard until 1888 revision. First major Malagasy literary work playing crucial role developing orthography and literary expression.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 188, "audio_ids": [], "popularity": 0.01, "abbreviation": "UKRK", "title": "\u0411\u0456\u0431\u043b\u0456\u044f \u0432 \u043f\u0435\u0440. \u041f.\u041a\u0443\u043b\u0456\u0448\u0430 \u0442\u0430 \u0406.\u041f\u0443\u043b\u044e\u044f, 1905", "local_abbreviation": "UKRK", "local_title": "\u0411\u0456\u0431\u043b\u0456\u044f \u0432 \u043f\u0435\u0440. \u041f.\u041a\u0443\u043b\u0456\u0448\u0430 \u0442\u0430 \u0406.\u041f\u0443\u043b\u044e\u044f, 1905", "language_tag": "ukr", "language_name": "Ukrainian", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1903, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["UA", "US", "DE", "PL", "CZ", "CA", "GB", "IT", "ES"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": ["Noto Sans Cyrillic", "PT Sans"], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "United Methodist Church"], "version_description": "First complete Ukrainian Bible translation by Panteleimon Kuli\u0161, Ivan Puliuj, and Ivan Nechuy-Levytsky, published Vienna 1903 by British and Foreign Bible Society. Emerged amid Russian Empire restrictions on Ukrainian publications, becoming powerful symbol of national identity. Kuli\u0161 initiated 1860s believing Ukrainians deserved native-language Biblical texts. Puliuj, distinguished physicist fluent in fifteen languages, provided crucial scholarly expertise. Utilized 1866 Greek edition London Bible Society and Hebrew texts, synthesizing Eastern/Western Ukrainian variants. Created richness and stylistic unevenness drawing from folk vocabulary and church traditions. Significantly influenced Ukrainian literary language development despite being banned in Russian Empire.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 2307, "audio_ids": [], "popularity": 0, "abbreviation": "nld1939", "title": "Dutch Bible 1939", "local_abbreviation": "NLD1939", "local_title": "De Heilige Schrift, Petrus Canisiusvertaling, 1939", "language_tag": "nld", "language_name": "Dutch", "publisher_name": "Public Domain", "scope": "nt+portions", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1939, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["NL", "BE", "SR", "DE", "ZA", "US", "FR", "CW", "ES"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "United Methodist Church"], "version_description": "Significant milestone in Dutch Catholic Bible scholarship commissioned by Apologetical Society 'Petrus Canisius.' First Dutch Catholic Bible translated directly from Hebrew/Greek rather than Vulgate. Committee worked under episcopal approval reflecting Catholic response to modern biblical scholarship and Protestant achievements. Named after 16th-century Jesuit saint, employed moderately archaic Dutch remaining accessible. Methodology emphasized fidelity to source texts maintaining Catholic theological interpretations. Filled crucial gap providing vernacular scriptures based on scholarly principles. Despite archaic language served Dutch Catholic communities decades influencing subsequent translations.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 820, "audio_ids": [], "popularity": 0.01, "abbreviation": "HHBR", "title": "Hindi Holy Bible", "local_abbreviation": "HHBR", "local_title": "Hindi Holy Bible", "language_tag": "hin_ro", "language_name": "Hindi (Roman script)", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": null, "intended_use": ["balanced", "contemporary"], "reading_level": "intermediate", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["IN", "US", "GB", "CA", "FJ", "AE", "AU", "DE", "NZ"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": ["Noto Sans Devanagari", "Mangal"], "popular_sub_denominations": ["Presbyterian Church (USA)", "Christian and Missionary Alliance", "Assemblies of God"], "version_description": "Same Hindi translation rendered in Roman script addressing needs of Hindi speakers familiar with Latin alphabet. Reflects historical pattern of Hindustani Bible translations in multiple scripts: Devanagari, Nastaliq, Roman. Emerged recognizing many Hindi speakers, particularly English-medium educated or urban workers, find Roman script accessible. Bible Society of India produced Roman versions since 19th century. Maintains same textual foundation as HHBD using romanized transliteration. Targets Hindi speakers comfortable with Roman script, diaspora communities, limited Devanagari literacy. More limited usage compared to HHBD, serving specific demographic needs.", "popular_denominations": ["Mainline Protestant", "Evangelical Protestant", "Pentecostal / Charismatic"]}, {"bible_version_id": 65, "audio_ids": [], "popularity": 0.01, "abbreviation": "GANTP", "title": "Albrecht NT und Psalmen", "local_abbreviation": "GANTP", "local_title": "Albrecht NT und Psalmen", "language_tag": "deu", "language_name": "German", "publisher_name": "Public Domain", "scope": "nt+portions", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1920, "intended_use": ["formal", "scholarly"], "reading_level": "proficient", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["DE", "CH", "AT", "US", "PY", "NL", "GB", "CA", "IT"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Evangelical Lutheran Church in America", "United Methodist Church", "Presbyterian Church (USA)"], "version_description": "Early 20th-century work by Ludwig Albrecht (1861-1931), Evangelical Lutheran and Catholic Apostolic theologian. Sole translator with dual confessional background providing broad theological perspective. First edition (1920) utilized best available Greek manuscripts incorporating textual criticism advances. Pursued balance between scholarly accuracy and pastoral accessibility. Characterized by clear contemporary German avoiding archaisms and excessive modernization. Limited to New Testament and Psalms reflecting practical constraints. Provided valuable alternative for German Christians seeking scholarly yet accessible texts. Influence remained limited but demonstrated possibility of confessionally nuanced translation. Available through specialized publishers for historical study.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 166, "audio_ids": [], "popularity": 0.01, "abbreviation": "SVEN", "title": "Svenska 1917", "local_abbreviation": "SVEN", "local_title": "Svenska 1917", "language_tag": "swe", "language_name": "Swedish", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1917, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["SE", "FI", "NO", "US", "GB", "DE", "DK", "ES", "GR"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Evangelical Lutheran Church in America", "Presbyterian Church (USA)", "United Methodist Church"], "version_description": "Second official Swedish Bible translation commissioned by Swedish state, authorized by Crown for Church of Sweden liturgical use. Translation began 1773 reflecting lengthy state-sponsored biblical scholarship. Produced under royal patronage following Gustav Vasa Bible tradition. Employed contemporary Swedish linguistic standards maintaining formal equivalence. Committee consisted of state-appointed theologians ensuring scholarly rigor and ecclesiastical approval. Source texts followed Protestant traditions utilizing Textus Receptus. Significantly influenced subsequent Nordic translations. Publication coincided with Swedish national consciousness and linguistic standardization. Served authoritative liturgical text until Bibel 2000, demonstrating remarkable longevity supporting state-church relationship.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 182, "audio_ids": [], "popularity": 0, "abbreviation": "TR1624", "title": "Elzevir Textus Receptus 1624", "local_abbreviation": "TR1624", "local_title": "Elzevir Textus Receptus 1624", "language_tag": "grc", "language_name": "Koine Greek", "publisher_name": "Public Domain", "scope": "nt", "has_audio": false, "translation_type": "direct", "release_year": 1624, "intended_use": ["specialized", "ancient_language"], "reading_level": "advanced", "source_manuscript": ["Textus Receptus (Greek NT only)"], "top_countries": ["US", "BR", "GR", "GB", "JP", "KR", "CA", "ID", "DE"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": ["Noto Sans Greek", "GFS Didot"], "popular_sub_denominations": ["[ \"Seventh-day Adventist Church", "Southern Baptist Convention", "Presbyterian Church (USA)\" ][\"Finnish Lutheran Church", "Conservative Finnish Protestant Groups", "Finnish Evangelical Communities\"] }", ""], "version_description": "Significant milestone in biblical publishing edited by Abraham and Bonaventure Elzevir. First of three Greek New Testament editions (1624, 1633, 1641) essentially reprinting Theodore Beza's 1565 edition with fifty minor differences. Brothers of Flemish ancestry gained prominence through scholarly publications and elegant typography. Based on late Byzantine manuscripts following Textus Receptus lineage from Erasmus through Stephanus and Beza. Manuscript basis limited representing Byzantine text-type. Gained widespread European acceptance as standard for commentary and collation establishing Elzevir reputation for accuracy and elegance.", "popular_denominations": ["Adventist", "Evangelical Protestant", "Mainline Protestant"]}, {"bible_version_id": 60, "audio_ids": [], "popularity": 0, "abbreviation": "FI1776", "title": "Finnish 1776", "local_abbreviation": "FI1776", "local_title": "Finnish 1776", "language_tag": "fin", "language_name": "Finnish", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1776, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["FI", "SE", "US", "CA", "NO", "AU", "GB", "ES", "DE"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Evangelical Lutheran Church in America", "Presbyterian Church (USA)", "United Methodist Church"], "version_description": "First translation written modern Finnish for ecclesiastical and domestic use, produced under Evangelical Lutheran Church of Finland auspices. Revision of 1642 Biblia updated reflecting evolving Finnish linguistic standards and increased literacy. Based on Textus Receptus following Protestant principles. Underwent 1859 revision extending utility. Played crucial role developing standard Finnish literary language. Continues use by Conservative Laestadian and \"Beseecher\" revival movements. Enduring significance in Finnish cultural identity formation establishing Biblical Finnish foundation. Remained standard until 1933/1938 revision demonstrating lasting scholarly and liturgical value.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 3427, "audio_ids": [], "popularity": 0, "abbreviation": "TCENT", "title": "The Text-Critical English New Testament", "local_abbreviation": "TCENT", "local_title": "The Text-Critical English New Testament", "language_tag": "eng", "language_name": "English", "publisher_name": "eBible.org", "scope": "nt", "has_audio": false, "translation_type": "direct", "release_year": 2022, "intended_use": ["specialized", "academic", "critical"], "reading_level": "advanced", "source_manuscript": ["Critical Text (multiple editions)"], "top_countries": ["US", "NG", "ZA", "GH", "GB", "PH", "IN", "KE", "CA", "AU"], "additional_resources": ["text-critical notes", "footnotes"], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Seventh-day Adventist Church", "Southern Baptist Convention", "Presbyterian Church (USA)"], "version_description": "Contemporary scholarly work by Robert Adam Boyd (M.Div., Fuller Seminary), Wycliffe Bible Translators linguist. Documents translatable differences in eleven major Greek New Testament editions including Nestle-Aland, SBL, Tyndale House, and others. English translation follows Byzantine Text using \"optimal equivalence\" philosophy with Tyndale-King James literary style. Critical apparatus provides manuscript percentages for collated variants. Represents modern Byzantine text-type advocacy challenging Alexandrian preference. Serves as both translation and comprehensive textual criticism tool, making complex manuscript evidence accessible to non-specialists while maintaining scholarly rigor. Academic assessment recognizes value for understanding textual traditions and manuscript evidence.", "popular_denominations": ["Adventist", "Evangelical Protestant", "Mainline Protestant"]}, {"bible_version_id": 526, "audio_ids": [], "popularity": 0, "abbreviation": "CSIA", "title": "Hungarian Bible by Lajos Csia", "local_abbreviation": "CSIA", "local_title": "Hungarian Bible by Lajos Csia", "language_tag": "hun", "language_name": "Hungarian", "publisher_name": "Public Domain", "scope": "nt", "has_audio": false, "translation_type": "mostly_direct", "release_year": null, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["HU", "RO", "DE", "GB", "US", "SK", "AT", "CA", "NL"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "United Methodist Church"], "version_description": "Emerged during early 20th-century Hungarian Protestant revival reflecting post-Habsburg theological independence. Lajos Csia (1887-1962), distinguished Reformed minister and biblical scholar, mastered Hebrew, Greek, Latin, German, English. Employed primitivist theological methodology emphasizing return to original sources. Strongly Reformed/Calvinist representing Hungarian Protestant independence from Catholic Habsburg influence. Multiple editions including 1997 third edition. Academic studies identify Csia as \"modern Hungarian primitivist\" representing important developments in Hungarian Protestant theology and biblical scholarship.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 183, "audio_ids": [], "popularity": 0, "abbreviation": "TR1894", "title": "Scrivener\u2019s Textus Receptus 1894", "local_abbreviation": "TR1894", "local_title": "Scrivener\u2019s Textus Receptus 1894", "language_tag": "grc", "language_name": "Koine Greek", "publisher_name": "Public Domain", "scope": "nt", "has_audio": false, "translation_type": "direct", "release_year": 1894, "intended_use": ["specialized", "ancient_language"], "reading_level": "advanced", "source_manuscript": ["Textus Receptus (Greek NT only)"], "top_countries": ["US", "BR", "GR", "GB", "CA", "DE", "AU", "KR", "AR"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": ["Noto Sans Greek", "GFS Didot"], "popular_sub_denominations": ["Southern Baptist Convention", "Churches of Christ", "Evangelical Free Church of America"], "version_description": "Frederick Henry Ambrose Scrivener's culmination of 19th-century English textual criticism. Scrivener (1813-1891), Trinity College Cambridge graduate and English New Testament Revision Committee member, reconstructed precise Greek text underlying 1611 KJV. Recognized KJV translators incorporated readings from multiple sources. Using Beza's 1598 as foundation, examined eighteen Textus Receptus editions identifying KJV-matching readings. Methodology involved detailed collation documented in extensive footnotes. Serves definitive representation of textual tradition behind KJV, providing scholars accurate reconstruction of 1611 translators' Greek text.", "popular_denominations": ["Evangelical Protestant", "Restorationist"]}, {"bible_version_id": 161, "audio_ids": [], "popularity": 0, "abbreviation": "SK73", "title": "Karl XII 1873", "local_abbreviation": "SK73", "local_title": "Karl XII 1873", "language_tag": "swe", "language_name": "Swedish", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1873, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["SE", "FI", "NO", "US", "NL", "DE", "DK", "AU", "LV"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Evangelical Lutheran Church in America", "Presbyterian Church (USA)", "United Methodist Church"], "version_description": "19th-century modernization of historic Charles XII Bible (1703) responding to Swedish religious revival and contemporary language needs. Based on 1703 Charles XII Bible (modernized 1618 Gustav II Adolf Bible). New Testament used Textus Receptus. 1873 edition modernized 17th-century Swedish maintaining theological content. Published British and Foreign Bible Society reflecting international Protestant cooperation. Lutheran representing Church of Sweden's official translation tradition. Employed 19th-century Swedish orthography making historic text accessible. Important bridge between historical Swedish Bible translation and modern accessibility.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 318, "audio_ids": [], "popularity": 0, "abbreviation": "LJD", "title": "Latvie\u0161u Jaun\u0101 Der\u012bba", "local_abbreviation": "LJD", "local_title": "Latvie\u0161u Jaun\u0101 Der\u012bba", "language_tag": "lvs", "language_name": "Latvian", "publisher_name": "Public Domain", "scope": "nt", "has_audio": false, "translation_type": "dynamic_equivalence", "release_year": 2007, "intended_use": ["balanced", "contemporary"], "reading_level": "intermediate", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["LV", "GB", "DE", "US", "IE", "DK", "NO", "NL", "SE"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Evangelical Lutheran Church in America", "Presbyterian Church (USA)", "United Methodist Church"], "version_description": "Part of broader Latvian Bible tradition initiated by Ernst Gl\u00fcck's 1694 Bible. Built upon Lutheran pastor Johann Ernst Gl\u00fcck's tradition creating first complete Latvian Bible from Hebrew/Greek. Following Gl\u00fcck's methodology translating from original languages. Associated with Latvian Bible Society beginning new translation 1995, producing Gospels/Acts 1999, complete New Testament 2007. Primarily Lutheran reflecting Latvia's historical Protestant tradition. Contributes to standardized written Latvian continuing Gl\u00fcck's historic role establishing uniform orthography. Represents continuity in Baltic Bible translation scholarship preserving Latvian linguistic heritage.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 45, "audio_ids": [], "popularity": 0, "abbreviation": "CSLAV", "title": "\u0411\u0438\u0431\u043b\u0438\u044f \u043d\u0430 \u0446\u0435\u0440\u043a\u043e\u0432\u043d\u043e\u0441\u043b\u0430\u0432\u044f\u043d\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435", "local_abbreviation": "CSLAV", "local_title": "\u0411\u0438\u0431\u043b\u0438\u044f \u043d\u0430 \u0446\u0435\u0440\u043a\u043e\u0432\u043d\u043e\u0441\u043b\u0430\u0432\u044f\u043d\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435", "language_tag": "rus", "language_name": "Russian", "publisher_name": "Public Domain", "scope": "nt", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1751, "intended_use": ["specialized", "ancient_language"], "reading_level": "proficient", "source_manuscript": ["Byzantine Text", "Masoretic Text"], "top_countries": ["RU", "UA", "US", "DE", "BY", "KZ", "CZ", "NL", "PL"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": ["Ponomar Unicode", "Hirmos Ponomar"], "popular_sub_denominations": ["Russian Orthodox", "Greek Orthodox", "Antiochian Orthodox"], "version_description": "Oldest Slavic biblical tradition originating with Saints Cyril and Methodius's Great Moravia mission (864-865). First complete manuscript compiled under Archbishop Gennady of Novgorod 1499, utilizing Vulgate/Septuagint sources. Prioritized liturgical functionality over vernacular accessibility. Key publications: 1581 Ostrog Bible, authoritative 1751 Elizabeth Bible remaining Russian Orthodox standard. Profound ecclesiastical significance serving liturgical language across Orthodox Slavic churches. Preserves archaic Slavonic forms crucial understanding Proto-Slavic development. Available traditional print and digital formats. Foundational role in Slavic Christianity though debates persist regarding optimal source texts and liturgical versus vernacular priorities.", "popular_denominations": ["Eastern Orthodox"]}, {"bible_version_id": 49, "audio_ids": [], "popularity": 0, "abbreviation": "DA1871", "title": "Danske Bibel 1871/1907", "local_abbreviation": "DA1871", "local_title": "Danske Bibel 1871/1907", "language_tag": "dan", "language_name": "Danish", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1871, "intended_use": ["formal", "scholarly"], "reading_level": "intermediate", "source_manuscript": ["Critical Text", "Masoretic Text"], "top_countries": ["DK", "NO", "FO", "US", "SE", "DE", "GB", "NL", "GL"], "additional_resources": [], "license_type": "public_domain", "license_description": "No copyright restrictions whatsoever. You can copy, distribute, sell, modify, or use the text in any way without permission or payment.", "recommended_font": [], "popular_sub_denominations": ["Evangelical Lutheran Church in America", "Presbyterian Church (USA)", "United Methodist Church"], "version_description": "Culmination of Resen-Svaneian translation tradition prioritizing fidelity to Hebrew/Greek over idiomatic Danish. Danish Bible Society produced combining new 1871 Old Testament with 1819 New Testament. Unlike Luther-influenced translations, emphasized literal accuracy preserving perceived divine inspiration. Reflected 19th-century biblical scholarship commitment to original languages over vernacular accessibility. Final translation in traditional Danish approach before modern critical methods. Served Danish Lutheran churches until superseded by contemporary translations. Demonstrates tension between scholarly precision and congregational comprehension. Historically significant representing pre-critical biblical translation philosophy though criticized for wooden literal approach occasionally obscuring meaning.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 25, "audio_ids": [], "popularity": 0, "abbreviation": "BHNT", "title": "Navarro-Labourdin Basque", "local_abbreviation": "BHNT", "local_title": "Navarro-Labourdin Basque", "language_tag": "eus", "language_name": "Basque", "publisher_name": "Public Domain", "scope": "full_bible", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1571, "intended_use": ["balanced", "contemporary"], "reading_level": "intermediate", "source_manuscript": ["Vulgate", "Textus Receptus"], "top_countries": ["ES", "US", "BR", "MX", "FR", "PY", "AR", "GB", "UA", "RO"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Evangelical Lutheran Church in America", "Roman Catholic Church"], "version_description": "Navarro-Labourdin designation refers to literary Basque variety combining Labourd, Lower Navarre, Soule dialects before standardization. Primary translator Joannes Leizarraga (1506-1601), converted Catholic priest, commissioned by Reformed Church Synod of Pau 1564. Based primarily on French Geneva Bible consulting Vulgate and Greek texts. Faced challenge creating unified literary language from multiple dialects with no established written tradition. Published August 22, 1571, La Rochelle including New Testament, calendar, and Christian instruction. Only 25 copies survive. First complete book in Basque establishing precedent for vernacular religious literature contributing to Basque linguistic heritage preservation.", "popular_denominations": ["Mainline Protestant", "Roman Catholic"]}, {"bible_version_id": 135, "audio_ids": [], "popularity": 0, "abbreviation": "POTL", "title": "Matthew and Acts", "local_abbreviation": "POTL", "local_title": "Matthew and Acts", "language_tag": "pot", "language_name": "Potawatomi", "publisher_name": "Public Domain", "scope": "portions", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1833, "intended_use": ["specialized", "partial_text"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus"], "top_countries": ["US", "KH", "PH", "GT"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Presbyterian Church (USA)", "Assemblies of God", "Christian and Missionary Alliance"], "version_description": "Potawatomi Central Algonquian language originally Great Lakes region. Translation emerged during forced removal following 1833 Treaty of Chicago. Johnston Lykins (1800-1876), Baptist missionary and self-taught physician, completed 1844. Likely based on King James Version. Rendered Christian concepts into different cultural framework; primarily oral language requiring orthographic development. Published British and Foreign Bible Society using Kansas's first printing press. Served evangelistic and educational purposes. Partial translation reflecting practical limitations. Primarily historical/linguistic interest; represents early American frontier Bible translation demonstrating missionary activity, Native American cultural preservation intersection during westward expansion.", "popular_denominations": ["Mainline Protestant", "Pentecostal / Charismatic", "Evangelical Protestant"]}, {"bible_version_id": 309, "audio_ids": [], "popularity": 0, "abbreviation": "EEP", "title": "Eesti Piibel", "local_abbreviation": "EEP", "local_title": "Eesti Piibel", "language_tag": "ekk", "language_name": "Estonian, Standard", "publisher_name": "Public Domain", "scope": "nt+portions", "has_audio": false, "translation_type": "mostly_direct", "release_year": 1739, "intended_use": ["balanced", "contemporary"], "reading_level": "intermediate", "source_manuscript": ["Textus Receptus", "Masoretic Text"], "top_countries": ["EE", "FI", "US", "BR", "CA", "DE", "GB", "SE", "NO"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": [], "popular_sub_denominations": ["Evangelical Lutheran Church in America", "Presbyterian Church (USA)", "United Methodist Church"], "version_description": "Modern Estonian Bible builds upon Anton Thor Helle's 1739 translation representing contemporary scholarship. 1997 edition emerged from Estonian Bible Society's ecumenical editorial board incorporating multiple denominational perspectives following Soviet independence. Translators included Lutheran, Methodist, Baptist representatives with Catholic/Pentecostal contributions. Emphasized accessibility in contemporary Estonian maintaining theological accuracy, utilizing 1968 Old Testament and revised 1989 New Testament. First complete Estonian Bible published domestically post-WWII. Serves Estonia's diverse Christian communities across denominations. Contributes to modern Estonian literary development preserving biblical terminology consistency. Recognized as successful ecumenical project symbolizing Estonian religious independence.", "popular_denominations": ["Mainline Protestant"]}, {"bible_version_id": 3621, "audio_ids": [789], "popularity": 0, "abbreviation": "bho", "title": "Bhojpuri NT (BSI)", "local_abbreviation": "bho", "local_title": "Bhojpuri NT (BSI)", "language_tag": "bho", "language_name": "Bhojpuri", "publisher_name": "Public Domain", "scope": "nt", "has_audio": true, "translation_type": "thought_for_thought", "release_year": null, "intended_use": ["specialized", "partial_text"], "reading_level": "intermediate", "source_manuscript": ["Critical Text"], "top_countries": ["IN", "NP", "GB", "US", "AU", "RO"], "additional_resources": [], "license_type": "copyrighted", "license_description": "Traditional copyright protection with restrictions on how much can be quoted or used without permission (typically 250-500 verses maximum).", "recommended_font": ["Noto Sans Devanagari", "Mangal"], "popular_sub_denominations": ["Presbyterian Church (USA)", "Christian and Missionary Alliance", "Assemblies of God"], "version_description": "Bhojpuri Indo-Aryan language spoken 50 million across North India and Nepal's Madhesh. Despite large population, historically marginalized favoring Hindi/English formal religious contexts. Bible Society of India undertook systematic provision in Indian languages. BSI employs trained scholars working from Hebrew/Greek following United Bible Societies principles. Based on Biblia Hebraica Stuttgartensia and Novum Testamentum Graece ensuring scholarly accuracy. Faced diglossia issues, dialectal variations, developing appropriate theological terminology. Published BSI copyright 2016, available print/audio formats. Actively used in Bhojpuri churches valuable for rural evangelism where Hindi fluency limited. Demonstrates heart-language Scripture provision importance supporting \"faith comes by hearing\" in mother tongue.", "popular_denominations": ["Mainline Protestant", "Evangelical Protestant", "Pentecostal / Charismatic"]}, {"bible_version_id": 110, "audio_ids": [], "popularity": 0.19, "abbreviation": "NIrV", "title": "New International Reader\u2019s Version 2014", "local_abbreviation": "NIrV", "local_title": "New International Reader\u2019s Version", "language_tag": "eng", "language_name": "English", "publisher_name": "Biblica, Inc.", "scope": "full_bible", "has_audio": false, "translation_type": "dynamic_equivalence", "release_year": 1996, "intended_use": ["children", "ESL", "early_readers"], "reading_level": "early", "source_manuscript": ["Masoretic Text", "Nestle-Aland", "Dead Sea Scrolls"], "top_countries": ["US", "CA", "GB", "ZA", "NG", "PH", "AU", "IN", "GH"], "additional_resources": ["simplified vocabulary", "shorter sentences", "section headings", "maps"], "license_type": "copyrighted", "license_description": "Biblica copyright", "recommended_font": [], "popular_sub_denominations": ["Baptist", "Methodist", "Presbyterian"], "version_description": "Simplified translation derived from NIV utilizing third-grade reading level. Conservative evangelical methodology employed by forty-seven translators representing multiple denominations. Targets children ages 8-14, ESL learners, and adults with reading difficulties. Features abbreviated sentences averaging 13-15 words, simplified vocabulary, and integrated dictionary for technical terminology. Published by Zondervan, maintains theological orthodoxy while maximizing comprehensibility.", "popular_denominations": ["Evangelical Protestant", "Baptist", "Methodist"]}, {"bible_version_id": 1359, "audio_ids": [], "popularity": 0.2, "abbreviation": "ICB", "title": "International Children\u2019s Bible", "local_abbreviation": "ICB", "local_title": "International Children\u2019s Bible", "language_tag": "eng", "language_name": "English", "publisher_name": "Thomas Nelson, Inc.", "scope": "full_bible", "has_audio": false, "translation_type": "dynamic_equivalence", "release_year": 1987, "intended_use": ["children", "devotional"], "reading_level": "early", "source_manuscript": ["United Bible Societies Greek Text", "Biblia Hebraica"], "top_countries": ["US", "GB", "NG", "ZA", "CA", "AU", "PH", "GH", "IN"], "additional_resources": ["dictionary", "concordance", "maps", "illustrations"], "license_type": "copyrighted", "license_description": "Permission required for commercial use", "recommended_font": [], "popular_sub_denominations": ["Southern Baptist", "Independent Baptist", "Non-denominational"], "version_description": "First complete Bible translation specifically designed for children at third-grade level. Conservative evangelical approach, translated directly from Hebrew/Greek/Aramaic manuscripts by twenty-one scholars. Published by Thomas Nelson (1987). Modernizes ancient measurements, clarifies figures of speech, converts rhetorical questions to statements. Targets elementary-age children while serving adults seeking straightforward language. Maintains broad denominational appeal.", "popular_denominations": ["Evangelical Protestant", "Baptist", "Non-denominational"]}, {"bible_version_id": 1849, "audio_ids": [], "popularity": 1.22, "abbreviation": "TPT", "title": "The Passion Translation", "local_abbreviation": "TPT", "local_title": "The Passion Translation", "language_tag": "eng", "language_name": "English", "publisher_name": "BroadStreet Publishing Group", "scope": "nt+portions", "has_audio": false, "translation_type": "paraphrase", "release_year": 2017, "intended_use": ["devotional", "contemporary"], "reading_level": "intermediate", "source_manuscript": ["Greek", "Hebrew", "Aramaic"], "top_countries": ["US", "NG", "ZA", "GB", "CA", "AU", "GH", "PH", "KE"], "additional_resources": ["extensive footnotes", "commentary", "devotional notes"], "license_type": "copyrighted", "license_description": "BroadStreet Publishing Group copyright", "recommended_font": [], "popular_sub_denominations": ["Bethel", "Hillsong", "Apostolic"], "version_description": "Controversial translation by single translator Brian Simmons, targeting charismatic/Pentecostal congregations. Utilizes emotional, contemporary language with extensive interpretive additions resulting in fifty percent expansion beyond original texts. Associated with New Apostolic Reformation movement. Published by BroadStreet (2014-ongoing). Heavily criticized by biblical scholars for inaccuracy; removed from Bible Gateway. Emphasizes \"heart-level\" impact over linguistic precision.", "popular_denominations": ["Pentecostal", "Charismatic", "Apostolic", "Non-denominational"]}, {"bible_version_id": 68, "audio_ids": [363], "popularity": 0.63, "abbreviation": "GNT", "title": "Good News Translation", "local_abbreviation": "GNT", "local_title": "Good News Translation", "language_tag": "eng", "language_name": "English", "publisher_name": "American Bible Society", "scope": "full_bible", "has_audio": true, "translation_type": "dynamic_equivalence", "release_year": 1976, "intended_use": ["general", "evangelistic", "children"], "reading_level": "intermediate", "source_manuscript": ["Masoretic Text", "UBS Greek New Testament"], "top_countries": ["US", "NG", "ZA", "GB", "PH", "GH", "CA", "KE", "IN"], "additional_resources": ["line drawings", "maps", "glossary", "Annie Vallotton illustrations"], "license_type": "copyrighted", "license_description": "American Bible Society copyright", "recommended_font": [], "popular_sub_denominations": ["Methodist", "Presbyterian", "Lutheran"], "version_description": "Common language Bible employing simple everyday English. Liberal/progressive translation philosophy prioritizing clarity over literal precision. Published by American Bible Society (1976). Targets children, ESL learners, and general readers seeking accessibility. Features line drawings, metric measurements, and contemporary vocabulary. Maintains broad ecumenical acceptance including Catholic endorsement. Previously designated Today's English Version (TEV). Multi-denominational translation committee.", "popular_denominations": ["Mainline Protestant", "Catholic", "Methodist"]}, {"bible_version_id": 1713, "audio_ids": [476], "popularity": 1.63, "abbreviation": "CSB", "title": "Christian Standard Bible", "local_abbreviation": "CSB", "local_title": "Christian Standard Bible", "language_tag": "eng", "language_name": "English", "publisher_name": "LifeWay Christian Resources", "scope": "full_bible", "has_audio": true, "translation_type": "dynamic_equivalence", "release_year": 2017, "intended_use": ["preaching", "study", "devotional"], "reading_level": "intermediate", "source_manuscript": ["Biblia Hebraica Stuttgartensia", "Nestle-Aland 28th edition"], "top_countries": ["US", "ZA", "CA", "GB", "AU", "NG", "PH", "BR", "IN"], "additional_resources": ["study notes", "cross-references", "maps", "commentary"], "license_type": "copyrighted", "license_description": "LifeWay Christian Resources copyright", "recommended_font": [], "popular_sub_denominations": ["Southern Baptist", "Independent Baptist", "Reformed Baptist"], "version_description": "Translation balancing literal accuracy with contemporary clarity at seventh-grade level. Conservative evangelical stance from Southern Baptist-affiliated Holman Bible Publishers (2017). Targets pastors, serious students, and conservative congregations. Employs literal rendering when clear, interpretive when necessary. Maintains traditional gender language. Translated by one hundred scholars from seventeen denominations. Successor to HCSB.", "popular_denominations": ["Evangelical Protestant", "Baptist", "Presbyterian"]}, {"bible_version_id": 97, "audio_ids": [85], "popularity": 1.98, "abbreviation": "MSG", "title": "The Message", "local_abbreviation": "MSG", "local_title": "The Message", "language_tag": "eng", "language_name": "English", "publisher_name": "Tyndale House Publishers Inc.", "scope": "full_bible", "has_audio": true, "translation_type": "paraphrase", "release_year": 2002, "intended_use": ["devotional", "contemporary", "reading"], "reading_level": "basic", "source_manuscript": ["Greek", "Hebrew", "Aramaic"], "top_countries": ["US", "NG", "ZA", "GB", "CA", "AU", "GH", "PH", "KE"], "additional_resources": ["contemporary language", "conversational style", "introductions"], "license_type": "copyrighted", "license_description": "Tyndale House Publishers copyright", "recommended_font": [], "popular_sub_denominations": ["Emerging Church", "Progressive", "Contemporary"], "version_description": "Paraphrase by Eugene Peterson employing contemporary American idioms. Middle-school reading level targeting young adults and those experiencing \"spiritual fatigue\" with traditional translations. Published by NavPress (1993-2002). Incorporates modern slang, cultural references, and conversational style. Criticized for theological liberties and New Age terminology. Suitable for casual reading, not serious study.", "popular_denominations": ["Non-denominational", "Emerging Church", "Progressive Protestant"]}, {"bible_version_id": 59, "audio_ids": [1, 1668], "popularity": 13.55, "abbreviation": "ESV", "title": "English Standard Version 2016", "local_abbreviation": "ESV", "local_title": "English Standard Version 2016", "language_tag": "eng", "language_name": "English", "publisher_name": "Crossway / Good News Publishers", "scope": "full_bible", "has_audio": true, "translation_type": "mostly_direct", "release_year": 2016, "intended_use": ["study", "preaching", "memorization"], "reading_level": "advanced", "source_manuscript": ["Masoretic Text", "Nestle-Aland 28th edition"], "top_countries": ["US", "PH", "ZA", "CA", "GB", "NG", "IN", "AU", "SG"], "additional_resources": ["extensive footnotes", "cross-references", "study notes", "maps"], "license_type": "copyrighted", "license_description": "Crossway Publishers copyright", "recommended_font": [], "popular_sub_denominations": ["Reformed", "Presbyterian", "Conservative Anglican"], "version_description": "Essentially literal translation at tenth-grade level. Conservative evangelical approach retaining traditional theological terminology. Published by Crossway (2001, revised 2016). Targets pastors, seminary students, and serious Bible students. Emphasizes transparency to original text structure, literary excellence, and liturgical dignity. Maintains masculine pronouns and traditional gender language. One hundred scholar translation team.", "popular_denominations": ["Evangelical Protestant", "Reformed", "Presbyterian"]}, {"bible_version_id": 111, "audio_ids": [3, 670, 706, 2319], "popularity": 49.05, "abbreviation": "NIV11", "title": "New International Version 2011", "local_abbreviation": "NIV", "local_title": "New International Version", "language_tag": "eng", "language_name": "English", "publisher_name": "Biblica, Inc.", "scope": "full_bible", "has_audio": true, "translation_type": "dynamic_equivalence", "release_year": 2011, "intended_use": ["general", "study", "worship"], "reading_level": "intermediate", "source_manuscript": ["Masoretic Text", "Nestle-Aland", "Dead Sea Scrolls"], "top_countries": ["US", "NG", "KE", "ZA", "PH", "IN", "GH", "GB", "UG"], "additional_resources": ["study notes", "cross-references", "maps", "concordance"], "license_type": "copyrighted", "license_description": "Biblica copyright", "recommended_font": [], "popular_sub_denominations": ["Evangelical Free", "Baptist", "Methodist"], "version_description": "Balanced translation at seventh-eighth grade level for general Christian audience. Moderate conservative approach by multinational, multidenominational Committee on Bible Translation. Published by Zondervan (2011 major revision). Incorporates gender-inclusive language based on contemporary usage research.", "popular_denominations": ["Evangelical Protestant", "Baptist", "Methodist", "Presbyterian"]}, {"bible_version_id": 116, "audio_ids": [6, 1392, 1430, 1914, 1920], "popularity": 14.07, "abbreviation": "NLT", "title": "New Living Translation", "local_abbreviation": "NLT", "local_title": "New Living Translation", "language_tag": "eng", "language_name": "English", "publisher_name": "Tyndale House Publishers Inc.", "scope": "full_bible", "has_audio": true, "translation_type": "dynamic_equivalence", "release_year": 2004, "intended_use": ["devotional", "study", "public_reading"], "reading_level": "basic", "source_manuscript": ["Masoretic Text", "UBS Greek New Testament", "Nestle-Aland 27th edition"], "top_countries": ["US", "ZA", "NG", "PH", "GB", "CA", "IN", "AU", "GH"], "additional_resources": ["study notes", "life application notes", "maps", "reading plans"], "license_type": "copyrighted", "license_description": "Tyndale House Publishers copyright", "recommended_font": [], "popular_sub_denominations": ["Evangelical Free", "Non-denominational", "Baptist"], "version_description": "Thought-for-thought translation at sixth-grade level\u2014most accessible major translation. Targets general readers, new believers, and families. Published by Tyndale House (1996, revised 2015). Converts ancient measurements, clarifies metaphors, employs gender-inclusive language. Translated by ninety scholars plus English stylists. Balances readability with accuracy, designed for public reading.", "popular_denominations": ["Evangelical Protestant", "Non-denominational", "Baptist"]}]","status":200,"url":"https://bible-versions-gateway-cb3tumxd.uc.gateway.dev/?include_descriptions=true"},"revalidate":300,"tags":[]}